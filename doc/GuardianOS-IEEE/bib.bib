
@inproceedings{nasahl_hector-v_2021,
	address = {New York, NY, USA},
	series = {{ASIA} {CCS} '21},
	title = {{HECTOR}-{V}: {A} {Heterogeneous} {CPU} {Architecture} for a {Secure} {RISC}-{V} {Execution} {Environment}},
	isbn = {978-1-4503-8287-8},
	shorttitle = {{HECTOR}-{V}},
	url = {https://doi.org/10.1145/3433210.3453112},
	doi = {10.1145/3433210.3453112},
	abstract = {To ensure secure and trustworthy execution of applications in potentially insecure environments, vendors frequently embed trusted execution environments (TEE) into their systems. Applications executed in this safe, isolated space are protected from adversaries, including a malicious operating system. TEEs are usually build by integrating protection mechanisms directly into the processor or by using dedicated external secure elements. However, both of these approaches only cover a narrow threat model resulting in limited security guarantees. Enclaves nested into the application processor typically provide weak isolation between the secure and non-secure domain, especially when considering side-channel attacks. Although external secure elements do provide strong isolation, the slow communication interface to the application processor is exposed to adversaries and restricts the use cases. Independently of the used approach, TEEs often lack the possibility to establish secure communication to peripherals, and most operating systems executed inside TEEs do not provide state-of-the-art defense strategies, making them vulnerable to various attacks. We argue that TEEs, such as Intel SGX or ARM TrustZone, implemented on the main application processor, are insecure, especially when considering side-channel attacks. In this paper, we demonstrate how a heterogeneous multicore architecture can be utilized to realize a secure TEE design. We directly embed a secure processor into our HECTOR-V architecture to provide strong isolation between the secure and non-secure domain. The tight coupling of the TEE and the application processor enables HECTOR-V to provide mechanisms for establishing secure communication channels between different devices. We further introduce RISC-V Secure Co-Processor (RVSCP), a security-hardened processor tailored for TEEs. To secure applications executed inside the TEE, RVSCP provides hardware enforced control-flow integrity and rigorously restricts I/O accesses to certain execution states. RVSCP reduces the trusted computing base to a minimum by providing operating system services directly in hardware.},
	urldate = {2024-11-04},
	booktitle = {Proceedings of the 2021 {ACM} {Asia} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Nasahl, Pascal and Schilling, Robert and Werner, Mario and Mangard, Stefan},
	year = {2021},
	pages = {187--199},
	file = {Version soumise:/Users/raphael/Zotero/storage/W24UL43B/Nasahl et al. - 2021 - HECTOR-V A Heterogeneous CPU Architecture for a Secure RISC-V Execution Environment.pdf:application/pdf},
}

@misc{lu_survey_2021,
	title = {A {Survey} on {RISC}-{V} {Security}: {Hardware} and {Architecture}},
	shorttitle = {A {Survey} on {RISC}-{V} {Security}},
	url = {http://arxiv.org/abs/2107.04175},
	doi = {10.48550/arXiv.2107.04175},
	abstract = {The Internet of Things (IoT) is an ongoing technological revolution. Embedded processors are the processing engines of smart IoT devices. For decades, these processors were mainly based on the Arm instruction set architecture (ISA). In recent years, the free and open RISC-V ISA standard has attracted the attention of industry and academia and is becoming the mainstream. Data security and user privacy protection are common challenges faced by all IoT devices. In order to deal with foreseeable security threats, the RISC-V community is studying security solutions aimed at achieving a root of trust (RoT) and ensuring that sensitive information on RISC-V devices is not tampered with or leaked. Many RISC-V security research projects are underway, but the academic community has not yet conducted a comprehensive survey of RISC-V security solutions. In order to fill this research gap, this paper presents an in-depth survey on RISC-V security technologies. This paper summarizes the representative security mechanisms of RISC-V hardware and architecture. Based on our survey, we predict the future research and development directions of RISC-V security. We hope that our research can inspire RISC-V researchers and developers.},
	urldate = {2024-11-04},
	publisher = {arXiv},
	author = {Lu, Tao},
	month = jul,
	year = {2021},
	note = {arXiv:2107.04175},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Hardware Architecture},
	file = {Preprint PDF:/Users/raphael/Zotero/storage/9PHW3EZE/Lu - 2021 - A Survey on RISC-V Security Hardware and Architecture.pdf:application/pdf;Snapshot:/Users/raphael/Zotero/storage/G946BI49/2107.html:text/html},
}

@misc{noauthor_demystifying_nodate,
	title = {Demystifying a very simple {TrustZone} enabled program on {ARM} {Cortex}-{M33}},
	url = {https://metebalci.com/blog/hello-trustzone/},
	abstract = {This is an explanation of a simple TrustZone enabled program on ARM Cortex-M33.},
	language = {en-US},
	urldate = {2024-11-12},
	file = {Snapshot:/Users/raphael/Zotero/storage/428DDKM7/hello-trustzone.html:text/html},
}

@misc{k_risc-v_2023,
	title = {{RISC}-{V} {Memory} {Protection}: {Diving} {Deep} into the {Complexities}},
	shorttitle = {{RISC}-{V} {Memory} {Protection}},
	url = {https://medium.com/@talktokarthikbk/risc-v-memory-protection-diving-deep-into-the-complexities-9d751212be6b},
	abstract = {Discussing RISC-V PMPs in depth.},
	language = {en},
	urldate = {2024-11-12},
	journal = {Medium},
	author = {K, Karthik B.},
	month = nov,
	year = {2023},
	file = {Snapshot:/Users/raphael/Zotero/storage/MX5KJW2N/risc-v-memory-protection-diving-deep-into-the-complexities-9d751212be6b.html:text/html},
}

@misc{noauthor_control_nodate,
	title = {Control and {Status} {Registers} - {Writing} a {RISC}-{V} {Emulator} in {Rust}},
	url = {https://book.rvemu.app/hardware-components/03-csrs.html},
	urldate = {2024-11-12},
	file = {Control and Status Registers - Writing a RISC-V Emulator in Rust:/Users/raphael/Zotero/storage/3YFMIPF2/03-csrs.html:text/html},
}

@article{chen_dites_2022,
	title = {{DITES}: {A} {Lightweight} and {Flexible} {Dual}-{Core} {Isolated} {Trusted} {Execution} {SoC} {Based} on {RISC}-{V}},
	volume = {22},
	copyright = {http://creativecommons.org/licenses/by/3.0/},
	issn = {1424-8220},
	shorttitle = {{DITES}},
	url = {https://www.mdpi.com/1424-8220/22/16/5981},
	doi = {10.3390/s22165981},
	abstract = {A Trusted Execution Environment (TEE) is an efficient way to secure information. To obtain higher efficiency, the building of a dual-core system-on-chip (SoC) with TEE security capabilities is the hottest topic. However, TEE SoCs currently commonly use complex processor cores such as Rocket, resulting in high resource usage. More importantly, the cryptographic unit lacks flexibility and ignores secure communication in dual cores. To address the above problems, we propose DITES, a dual-core TEE SoC based on a Reduced Instruction Set Computer-V (RISC-V). At first, we designed a fully isolated multi-level bus architecture based on a lightweight RISC-V processor with an integrated crypto core supporting Secure Hashing Algorithm-1 (SHA1), Advanced Encryption Standard (AES), and Rivest–Shamir–Adleman (RSA), among which RSA can be configured to five key lengths. Then, we designed a secure boot based on Chain-of-Trust (CoT). Furthermore, we propose a hierarchical access policy to improve the security of inter-core communication. Finally, DITES is deployed on a Kintex 7 Field-Programmable-Gate-Array (FPGA) with a power consumption of 0.297 W, synthesized using TSMC 90 nm. From the results, the acceleration ratios of SHA1 and RSA1024 decryption/encryption can reach 75 and 1331/1493, respectively. Compared to exiting TEE SoCs, DITES has lower resource consumption, higher flexibility, and better security.},
	language = {en},
	number = {16},
	urldate = {2024-11-14},
	journal = {Sensors},
	author = {Chen, Yuehai and Chen, Huarun and Chen, Shaozhen and Han, Chao and Ye, Wujian and Liu, Yijun and Zhou, Huihui},
	month = jan,
	year = {2022},
	note = {Number: 16
Publisher: Multidisciplinary Digital Publishing Institute},
	keywords = {cryptography, dual core, RISC-V, SoC, Trusted Execution Environment},
	pages = {5981},
	file = {Full Text PDF:/Users/raphael/Zotero/storage/3S5TWKB7/Chen et al. - 2022 - DITES A Lightweight and Flexible Dual-Core Isolated Trusted Execution SoC Based on RISC-V.pdf:application/pdf},
}

@misc{menetrey_attestation_2022,
	title = {Attestation {Mechanisms} for {Trusted} {Execution} {Environments} {Demystified}},
	url = {http://arxiv.org/abs/2206.03780},
	abstract = {Attestation is a fundamental building block to establish trust over software systems. When used in conjunction with trusted execution environments, it guarantees the genuineness of the code executed against powerful attackers and threats, paving the way for adoption in several sensitive application domains. This paper reviews remote attestation principles and explains how the modern and industrially well-established trusted execution environments Intel SGX, Arm TrustZone and AMD SEV, as well as emerging RISC-V solutions, leverage these mechanisms.},
	urldate = {2024-11-14},
	publisher = {arXiv},
	author = {Ménétrey, Jämes and Göttel, Christian and Khurshid, Anum and Pasin, Marcelo and Felber, Pascal and Schiavoni, Valerio and Raza, Shahid},
	month = sep,
	year = {2022},
	note = {arXiv:2206.03780},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Distributed, Parallel, and Cluster Computing},
	file = {Full Text PDF:/Users/raphael/Zotero/storage/8JLVVNWK/Ménétrey et al. - 2022 - Attestation Mechanisms for Trusted Execution Environments Demystified.pdf:application/pdf;Snapshot:/Users/raphael/Zotero/storage/642LNPWC/2206.html:text/html},
}

@phdthesis{schneider_trusted_2024,
	type = {Doctoral {Thesis}},
	title = {Trusted {Computing} on {Modern} {Platforms}: {Analysis}, {Challenges}, and {Implications}},
	copyright = {http://rightsstatements.org/page/InC-NC/1.0/},
	shorttitle = {Trusted {Computing} on {Modern} {Platforms}},
	url = {https://www.research-collection.ethz.ch/handle/20.500.11850/671609},
	abstract = {Computing architectures come in all forms and shapes, and they impact our daily lives significantly. Smartphones are omnipresent, most jobs require daily interactions with computers, and leisure time is dominated by the availability of decades worth of TV shows at the tip of a finger. As computing architectures dominate many fields, they must also process confidential data, from medical data and e-voting to personal communications in social networks. Protecting such confidential data is of utmost importance.   Recently, hardware support for confidential computing has been proposed for computing architectures called trusted execution environments (TEE). TEEs aim to enable computations on confidential data without trusting large codebases such as the operating system. They do so by launching a restricted environment isolated from all other software on the platform. Since TEE architectures have been made available in commercial products, they have been widely used in industrial and academic applications, and such confidential computing offerings have even permeated to major cloud providers.  While many TEE designs exist from academia and industry, keeping track of all proposals and understanding their advantages and disadvantages remains challenging. We start this thesis by studying numerous existing designs according to their security properties and design tradeoffs. We find that TEE designs are very much dictated by performance; thus, many designs end up with similar design decisions to keep the overhead to a minimum. Furthermore, TEE designs are restricted to the central processor, an apparent disconnect to modern platforms that offload computation to external accelerators. Therefore, we propose a TEE architecture that supports modern platforms with external specialized devices. Then, we turn to applications enabled by TEEs: We investigate an application that has the potential to negatively impact our society by increasing the effectiveness of fake news campaigns and potentially increasing the amount of sold votes in an e-voting system. While this is luckily not yet an acute problem, we highlight its implications and analyze defenses. Finally, we explore mitigations of side-channel attacks, an attack vector left to application developers to protect. We study how compilers can sometimes render state-of-the-art mitigations at the source-code level ineffective. We demonstrate multiple cases where modern cryptographic implementations that follow all guidelines for source-code mitigations produce binaries that may be vulnerable to side-channel attacks.},
	language = {en},
	urldate = {2024-11-14},
	school = {ETH Zurich},
	author = {Schneider, Moritz},
	year = {2024},
	doi = {10.3929/ethz-b-000671609},
	note = {Accepted: 2024-05-06T14:31:14Z},
	file = {Full Text PDF:/Users/raphael/Zotero/storage/437II5BT/Schneider - 2024 - Trusted Computing on Modern Platforms Analysis, Challenges, and Implications.pdf:application/pdf},
}

@inproceedings{shepherd_secure_2016,
	address = {Tianjin, China},
	title = {Secure and {Trusted} {Execution}: {Past}, {Present}, and {Future} - {A} {Critical} {Review} in the {Context} of the {Internet} of {Things} and {Cyber}-{Physical} {Systems}},
	isbn = {978-1-5090-3205-1},
	shorttitle = {Secure and {Trusted} {Execution}},
	url = {http://ieeexplore.ieee.org/document/7846943/},
	doi = {10.1109/TrustCom.2016.0060},
	abstract = {Notions like security, trust, and privacy are crucial in the digital environment and in the future, with the advent of technologies like the Internet of Things (IoT) and CyberPhysical Systems (CPS), their importance is only going to increase. Trust has different deﬁnitions; some situations rely on real-world relationships between entities while others depend on robust technologies to gain trust after deployment. In this paper we focus on these robust technologies, their evolution in past decades and their scope in the near future. The evolution of robust trust technologies has involved diverse approaches; as a consequence trust is deﬁned, understood and ascertained differently across heterogeneous domains and technologies. In this paper we look at digital trust technologies from the point of view of security and examine how they are making secure computing an attainable reality. The paper also revisits and analyses the Trusted Platform Module (TPM), Secure Elements (SE), Hypervisors and Virtualisation, Intel TXT, Trusted Execution Environments (TEE) like GlobalPlatform TEE, Intel SGX, along with Host Card Emulation, and Encrypted Execution Environment (E3). In our analysis we focus on these technologies and their application to the emerging domains of the IoT and CPS.},
	language = {en},
	urldate = {2024-11-18},
	booktitle = {2016 {IEEE} {Trustcom}/{BigDataSE}/{ISPA}},
	publisher = {IEEE},
	author = {Shepherd, Carlton and Arfaoui, Ghada and Gurulian, Iakovos and Lee, Robert P. and Markantonakis, Konstantinos and Akram, Raja Naeem and Sauveron, Damien and Conchon, Emmanuel},
	month = aug,
	year = {2016},
	pages = {168--177},
	file = {PDF:/Users/raphael/Zotero/storage/TLX5CITX/Shepherd et al. - 2016 - Secure and Trusted Execution Past, Present, and Future - A Critical Review in the Context of the In.pdf:application/pdf},
}

@misc{noauthor_how_2020,
	title = {How the {Xen} {Hypervisor} {Supports} {CPU} {Virtualization} on {ARM}},
	url = {https://www.starlab.io/blog/how-the-xen-hypervisor-supports-cpu-virtualization-on-arm},
	abstract = {Early computer architectures, like the first Acorn RISC Machine pictured in Figure 0, had no support for CPU virtualization. In the 30 years since, processor designers have added new hardware components to fully enable virtualization.  This article explores how the Xen hypervisor supports CPU virtua},
	language = {en-US},
	urldate = {2024-11-18},
	journal = {Star Lab Software},
	month = mar,
	year = {2020},
	file = {Snapshot:/Users/raphael/Zotero/storage/DY6AA4YQ/how-the-xen-hypervisor-supports-cpu-virtualization-on-arm.html:text/html},
}

@misc{noauthor_xen_nodate,
	title = {Xen {ARM} with {Virtualization} {Extensions} whitepaper - {Xen}},
	url = {https://wiki.xenproject.org/wiki/Xen_ARM_with_Virtualization_Extensions_whitepaper},
	urldate = {2024-11-18},
	file = {Xen ARM with Virtualization Extensions whitepaper - Xen:/Users/raphael/Zotero/storage/AQAXBWXG/Xen_ARM_with_Virtualization_Extensions_whitepaper.html:text/html},
}

@misc{httpswwwpolarismarketresearchcom_field_nodate,
	title = {Field {Programmable} {Gate} {Array} ({FPGA}) {Market} {Size} - 2032},
	url = {https://www.polarismarketresearch.com/industry-analysis/field-programmable-gate-array-fpga-market},
	abstract = {Field Programmable Gate Array (FPGA) Market Growing at a CAGR of 10.5\% with Market Size Worth \$28.81 Billion By 2032 Study By Polaris Market Research},
	language = {EN},
	urldate = {2024-11-18},
	journal = {Polaris},
	author = {https://www.polarismarketresearch.com, Polaris Market Research},
	file = {Snapshot:/Users/raphael/Zotero/storage/2KZKB2IY/field-programmable-gate-array-fpga-market.html:text/html},
}

@misc{noauthor_global_nodate,
	title = {Global {Embedded} {FPGA} {Market} {Size} \& {Share} {Analysis} - {Industry} {Research} {Report} - {Growth} {Trends}},
	url = {https://www.coherentmarketinsights.com/industry-reports/global-embedded-fpga-market},
	abstract = {Global Embedded FPGA Market is Segmented By Technology (EEPROM, Antifuse, SRAM, Flash, Others), By Application (Data Processing, Consumer Electronics, Industrial, Military \& Aerospace, Automotive, Telecom, Others), By Geography.},
	language = {en},
	urldate = {2024-11-18},
	file = {Snapshot:/Users/raphael/Zotero/storage/QVSGBU4F/global-embedded-fpga-market.html:text/html},
}

@misc{noauthor_instances_nodate,
	title = {Instances {F1} {Amazon} {EC2}},
	url = {https://aws.amazon.com/fr/ec2/instance-types/f1/},
	abstract = {Instances Amazon EC2 à usage général, extensibles et économiques},
	language = {fr-FR},
	urldate = {2024-11-18},
	journal = {Amazon Web Services, Inc.},
	file = {Snapshot:/Users/raphael/Zotero/storage/SJ3FB9F2/f1.html:text/html},
}

@inproceedings{zhao_fpga-based_2018,
	address = {San Francisco, CA},
	title = {{FPGA}-{Based} {Remote} {Power} {Side}-{Channel} {Attacks}},
	isbn = {978-1-5386-4353-2},
	url = {https://ieeexplore.ieee.org/document/8418606/},
	doi = {10.1109/SP.2018.00049},
	abstract = {The rapid adoption of heterogeneous computing has driven the integration of Field Programmable Gate Arrays (FPGAs) into cloud datacenters and ﬂexible System-on-Chips (SoCs). This paper shows that the integrated FPGA introduces a new security vulnerability by enabling software-based power side-channel attacks without physical proximity to a target system. We ﬁrst demonstrate that an on-chip power monitor can be built on a modern FPGA using ring oscillators (ROs), and characterize its ability to observe the power consumption of other modules on the FPGA or the SoC. Then, we show that the RO-based FPGA power monitor can be used for a successful power analysis attack on an RSA cryptomodule on the same FPGA. Additionally, we show that the FPGA-based power monitor can observe the power consumption of a CPU on the same SoC, and demonstrate that the FPGA-to-CPU power side-channel attack can break timing-channel protection for an RSA program running on a CPU. This work introduces and demonstrates remote power side-channel attacks using an FPGA, showing that the common assumption that power side-channel attacks require specialized equipment and physical access to the victim hardware is not true for systems with an integrated FPGA.},
	language = {en},
	urldate = {2024-11-18},
	booktitle = {2018 {IEEE} {Symposium} on {Security} and {Privacy} ({SP})},
	publisher = {IEEE},
	author = {Zhao, Mark and Suh, G. Edward},
	month = may,
	year = {2018},
	pages = {229--244},
	file = {PDF:/Users/raphael/Zotero/storage/CW58TBJL/Zhao et Suh - 2018 - FPGA-Based Remote Power Side-Channel Attacks.pdf:application/pdf},
}

@misc{li_survey_2023,
	title = {A {Survey} of {Secure} {Computation} {Using} {Trusted} {Execution} {Environments}},
	url = {http://arxiv.org/abs/2302.12150},
	abstract = {As an essential technology underpinning trusted computing, the trusted execution environment (TEE) allows one to launch computation tasks on both on- and off-premises data while assuring confidentiality and integrity. This article provides a systematic review and comparison of TEE-based secure computation protocols. We first propose a taxonomy that classifies secure computation protocols into three major categories, namely secure outsourced computation, secure distributed computation and secure multi-party computation. To enable a fair comparison of these protocols, we also present comprehensive assessment criteria with respect to four aspects: setting, methodology, security and performance. Based on these criteria, we review, discuss and compare the state-of-the-art TEE-based secure computation protocols for both general-purpose computation functions and special-purpose ones, such as privacy-preserving machine learning and encrypted database queries. To the best of our knowledge, this article is the first survey to review TEE-based secure computation protocols and the comprehensive comparison can serve as a guideline for selecting suitable protocols for deployment in practice. Finally, we also discuss several future research directions and challenges.},
	urldate = {2024-11-19},
	publisher = {arXiv},
	author = {Li, Xiaoguo and Zhao, Bowen and Yang, Guomin and Xiang, Tao and Weng, Jian and Deng, Robert H.},
	month = feb,
	year = {2023},
	note = {arXiv:2302.12150},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Artificial Intelligence, Computer Science - Databases},
	file = {Full Text PDF:/Users/raphael/Zotero/storage/3CPVZ4MY/Li et al. - 2023 - A Survey of Secure Computation Using Trusted Execution Environments.pdf:application/pdf;Snapshot:/Users/raphael/Zotero/storage/G2552MCK/2302.html:text/html},
}

@article{pinto_demystifying_2019,
	title = {Demystifying {Arm} {TrustZone}: {A} {Comprehensive} {Survey}},
	volume = {51},
	issn = {0360-0300, 1557-7341},
	shorttitle = {Demystifying {Arm} {TrustZone}},
	url = {https://dl.acm.org/doi/10.1145/3291047},
	doi = {10.1145/3291047},
	abstract = {The world is undergoing an unprecedented technological transformation, evolving into a state where ubiquitous Internet-enabled “things” will be able to generate and share large amounts of security- and privacy-sensitive data. To cope with the security threats that are thus foreseeable, system designers can find in Arm TrustZone hardware technology a most valuable resource. TrustZone is a System-on-Chip and CPU system-wide security solution, available on today’s Arm application processors and present in the new generation Arm microcontrollers, which are expected to dominate the market of smart “things.” Although this technology has remained relatively underground since its inception in 2004, over the past years, numerous initiatives have significantly advanced the state of the art involving Arm TrustZone. Motivated by this revival of interest, this paper presents an in-depth study of TrustZone technology. We provide a comprehensive survey of relevant work from academia and industry, presenting existing systems into two main areas, namely, Trusted Execution Environments and hardware-assisted virtualization. Furthermore, we analyze the most relevant weaknesses of existing systems and propose new research directions within the realm of tiniest devices and the Internet of Things, which we believe to have potential to yield high-impact contributions in the future.},
	language = {en},
	number = {6},
	urldate = {2024-11-19},
	journal = {ACM Computing Surveys},
	author = {Pinto, Sandro and Santos, Nuno},
	month = nov,
	year = {2019},
	pages = {1--36},
	file = {PDF:/Users/raphael/Zotero/storage/CYAGYQBS/Pinto et Santos - 2019 - Demystifying Arm TrustZone A Comprehensive Survey.pdf:application/pdf},
}

@misc{noauthor_235_nodate,
	title = {(235) {Trusted} {Execution} {Environments}: {A} {Technical} {Overview} of {Intel} {SGX}, {Arm} {TrustZone}, and {RISC}-{V} {PMP} - {YouTube}},
	shorttitle = {(235) {Trusted} {Execution} {Environments}},
	url = {https://www.youtube.com/},
	abstract = {Profitez des vidéos et de la musique que vous aimez, mettez en ligne des contenus originaux, et partagez-les avec vos amis, vos proches et le monde entier.},
	language = {fr-FR},
	urldate = {2024-11-24},
	file = {Snapshot:/Users/raphael/Zotero/storage/KHP4TU4E/watch.html:text/html},
}

@misc{schneider_sok_2022,
	title = {{SoK}: {Hardware}-supported {Trusted} {Execution} {Environments}},
	shorttitle = {{SoK}},
	url = {http://arxiv.org/abs/2205.12742},
	doi = {10.48550},
	abstract = {The growing complexity of modern computing platforms and the need for strong isolation protections among their software components has led to the increased adoption of Trusted Execution Environments (TEEs). While several commercial and academic TEE architectures have emerged in recent times, they remain hard to compare and contrast. More generally, existing TEEs have not been subject to a holistic systematization to understand the available design alternatives for various aspects of TEE design and their corresponding pros-and-cons. Therefore, in this work, we analyze the design of existing TEEs and systematize the mechanisms that TEEs implement to achieve their security goals, namely, verifiable launch, run-time isolation, trusted IO, and secure storage. More specifically, we analyze the typical architectural building blocks underlying TEE solutions, design alternatives for each of these components and the trade-offs that they entail. We focus on hardware-assisted TEEs and cover a wide range of TEE proposals from academia and the industry. Our analysis shows that although TEEs are diverse in terms of their goals, usage models, and instruction set architectures, they all share many common building blocks in terms of their design.},
	urldate = {2024-11-24},
	publisher = {arXiv},
	author = {Schneider, Moritz and Masti, Ramya Jayaram and Shinde, Shweta and Capkun, Srdjan and Perez, Ronald},
	month = may,
	year = {2022},
	note = {arXiv:2205.12742},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Hardware Architecture},
	file = {Full Text PDF:/Users/raphael/Zotero/storage/7558SVWG/Schneider et al. - 2022 - SoK Hardware-supported Trusted Execution Environments.pdf:application/pdf;Snapshot:/Users/raphael/Zotero/storage/IWR4QG9A/2205.html:text/html},
}

@misc{noauthor_thunderspy_nodate,
	title = {Thunderspy - {When} {Lightning} {Strikes} {Thrice}: {Breaking} {Thunderbolt} 3 {Security}},
	url = {https://thunderspy.io/#thunderspy-pocs},
	urldate = {2024-11-25},
	file = {Thunderspy - When Lightning Strikes Thrice\: Breaking Thunderbolt 3 Security:/Users/raphael/Zotero/storage/UMX7UZF9/thunderspy.io.html:text/html},
}

@misc{noauthor_history_2024,
	title = {The {History} of {Malware} {\textbar} {IBM}},
	url = {https://www.ibm.com/think/topics/malware-history},
	abstract = {Theoretically, malware has been around since the 1960s. Explore how malware has evolved throughout its history.},
	language = {en},
	urldate = {2024-11-25},
	month = aug,
	year = {2024},
}

@misc{noauthor_what_nodate,
	title = {What was the {WannaCry} ransomware attack?},
	url = {https://www.cloudflare.com/learning/security/ransomware/wannacry-ransomware/},
	abstract = {The WannaCry ransomware attack occurred on May 12, 2017, and impacted more than 200,000 computers in more than 150 countries. WannaCry is still active today.},
	language = {en-us},
	urldate = {2024-11-25},
	file = {Snapshot:/Users/raphael/Zotero/storage/VTN3XZMJ/wannacry-ransomware.html:text/html},
}

@misc{noauthor_side_nodate,
	title = {The {Side} {Channel} {Chronicles} \#1: {A} bit of history},
	shorttitle = {The {Side} {Channel} {Chronicles} \#1},
	url = {https://eshard.com $ { router.asPath }},
	abstract = {Understand the history of side channel attacks and learn essential techniques to defend against these covert threats in cryptographic security.},
	urldate = {2024-11-28},
	file = {Snapshot:/Users/raphael/Zotero/storage/RKF7ACIJ/Side_channel_attack_A_bit_of_history.html:text/html},
}

@inproceedings{brasser_sanctuary_2019,
	address = {San Diego, CA},
	title = {{SANCTUARY}: {ARMing} {TrustZone} with {User}-space {Enclaves}},
	isbn = {978-1-891562-55-6},
	shorttitle = {{SANCTUARY}},
	url = {https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_01A-1_Brasser_paper.pdf},
	doi = {10.14722/ndss.2019.23448},
	abstract = {ARM TrustZone is one of the most widely deployed security architecture providing Trusted Execution Environments (TEEs). Unfortunately, its usage and potential beneﬁts for application developers and end users are largely limited due to restricted deployment policies imposed by device vendors. Restriction is enforced since every Trusted App (TA) increases the TEE’s attack surface: any vulnerable or malicious TA can compromise the system’s security. Hence, deploying a TA requires mutual trust between device vendor and application developer, incurring high costs for both. Vendors work around this by offering interfaces to selected TEE functionalities, however, these are not sufﬁcient to securely implement advanced mobile services like banking. Extensive discussion of Intel’s SGX technology in academia and industry has unveiled the demand for an unrestricted use of TEEs, yet no comparable security architecture for mobile devices exists to this day.},
	language = {en},
	urldate = {2024-12-02},
	booktitle = {Proceedings 2019 {Network} and {Distributed} {System} {Security} {Symposium}},
	publisher = {Internet Society},
	author = {Brasser, Ferdinand and Gens, David and Jauernig, Patrick and Sadeghi, Ahmad-Reza and Stapf, Emmanuel},
	year = {2019},
	file = {PDF:/Users/raphael/Zotero/storage/K9XKWKET/Brasser et al. - 2019 - SANCTUARY ARMing TrustZone with User-space Enclaves.pdf:application/pdf},
}

@misc{lee_keystone_2019,
	title = {Keystone: {An} {Open} {Framework} for {Architecting} {TEEs}},
	shorttitle = {Keystone},
	url = {http://arxiv.org/abs/1907.10119},
	doi = {10.48550/arXiv.1907.10119},
	abstract = {Trusted execution environments (TEEs) are being used in all the devices from embedded sensors to cloud servers and encompass a range of cost, power constraints, and security threat model choices. On the other hand, each of the current vendor-specific TEEs makes a fixed set of trade-offs with little room for customization. We present Keystone -- the first open-source framework for building customized TEEs. Keystone uses simple abstractions provided by the hardware such as memory isolation and a programmable layer underneath untrusted components (e.g., OS). We build reusable TEE core primitives from these abstractions while allowing platform-specific modifications and application features. We showcase how Keystone-based TEEs run on unmodified RISC-V hardware and demonstrate the strengths of our design in terms of security, TCB size, execution of a range of benchmarks, applications, kernels, and deployment models.},
	urldate = {2024-12-08},
	publisher = {arXiv},
	author = {Lee, Dayeol and Kohlbrenner, David and Shinde, Shweta and Song, Dawn and Asanović, Krste},
	month = sep,
	year = {2019},
	note = {arXiv:1907.10119 [cs]},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Operating Systems},
	file = {Full Text PDF:/Users/raphael/Zotero/storage/N4ZAEZD9/Lee et al. - 2019 - Keystone An Open Framework for Architecting TEEs.pdf:application/pdf;Snapshot:/Users/raphael/Zotero/storage/VP6NST4M/1907.html:text/html},
}

@inproceedings{milan_trustsoc_2023,
	address = {Annecy, France},
	title = {{TrustSoC} : {Architecture} {SoC} hétérogène légère et efficace sécurisée par conception},
	shorttitle = {{TrustSoC}},
	url = {https://hal.science/hal-04213598},
	abstract = {Au cours des dernières années, les SoC (System-on-a-Chip) hétérogènes embarquant des processeurs à plusieurs coeurs et de la logique programmable ont progressé en terme de complexité et hétérogénéité. D'un point de vue sécurité, cela entraîne une augmentation de la surface d'attaque exploitable par un attaquant pour prendre le contrôle du système et/ou avoir accès à des données sensibles. Pour adresser ce problème, dans cet article, nous proposons les bases d'une architecture de SoC hétérogène de confiance sécurisée par conception appelée TrustSoC. Nous montrons que la sécurité ne doit pas être ajoutée après design, mais plutôt pensée depuis la phase de conception. Nous démontrons aussi que cette sécurité doit considérer tous les composants du SoC : matériels et logiciels. Nous basons notre proposition sur l'extension de la technologie ARM Trust-Zone, des contrôleurs de communication, des règles de fonctionnement et une isolation entre les composants logiciels et matériels et les partitions mémoires.},
	urldate = {2024-12-08},
	booktitle = {Conférence francophone d'informatique en {Parallélisme}, {Architecture} et {Système} ({COMPAS})},
	publisher = {LISTIC - Laboratoire d'Informatique, Systèmes, Traitement de l'Information et de la Connaissance},
	author = {Milan, Raphaele and Bossuet, Lilian and Lagadec, Loïc and Lara-Nino, Carlos Andres},
	month = jul,
	year = {2023},
	keywords = {AXI-4, Fpga, System-on-a-Chip, TrustZone},
	file = {Full Text PDF:/Users/raphael/Zotero/storage/GL6GCCVS/Milan et al. - 2023 - TrustSoC  Architecture SoC hétérogène légère et efficace sécurisée par conception.pdf:application/pdf},
}

@misc{noauthor_system--chip_nodate,
	title = {System-{On}-{Chip} ({Soc}) {Market} {Size}, {Analysis} \& {Growth} {By} 2032},
	url = {https://www.databridgemarketresearch.com/reports/global-system-on-chip-soc-market},
	abstract = {The System-on-Chip (SoC) Market was valued at USD 361.41 million and is predicted to reach USD 696.69 million, with a CAGR of 8.55\% by 2032.},
	language = {en},
	urldate = {2024-12-09},
	file = {Snapshot:/Users/raphael/Zotero/storage/5Q684FFP/global-system-on-chip-soc-market.html:text/html},
}

@misc{noauthor_system_2011,
	title = {System {On} {Chip}},
	url = {https://www.slideshare.net/slideshow/system-on-chip/6695775},
	abstract = {System On Chip - Download as a PDF or view online for free},
	language = {en},
	urldate = {2024-12-09},
	journal = {SlideShare},
	month = jan,
	year = {2011},
}

@misc{lab_system_2020,
	title = {System on {Chip} ({SoC}) {Introduction}},
	url = {https://microcontrollerslab.com/system-on-chip-soc-introduction/},
	abstract = {What is SoC System on Chip Introduction and explained with real life examples applications in mobile, embdded and computer industry},
	language = {en-US},
	urldate = {2024-12-09},
	journal = {Microcontrollers Lab},
	author = {Lab, Microcontrollers},
	month = oct,
	year = {2020},
	file = {Snapshot:/Users/raphael/Zotero/storage/76ZURR3G/system-on-chip-soc-introduction.html:text/html},
}

@misc{cruz_automatic_2022,
	title = {Automatic {Hardware} {Trojan} {Insertion} using {Machine} {Learning}},
	url = {http://arxiv.org/abs/2204.08580},
	doi = {10.48550/arXiv.2204.08580},
	abstract = {Due to the current horizontal business model that promotes increasing reliance on untrusted third-party Intellectual Properties (IPs), CAD tools, and design facilities, hardware Trojan attacks have become a serious threat to the semiconductor industry. Development of effective countermeasures against hardware Trojan attacks requires: (1) fast and reliable exploration of the viable Trojan attack space for a given design and (2) a suite of high-quality Trojan-inserted benchmarks that meet specific standards. The latter has become essential for the development and evaluation of design/verification solutions to achieve quantifiable assurance against Trojan attacks. While existing static benchmarks provide a baseline for comparing different countermeasures, they only enumerate a limited number of handcrafted Trojans from the complete Trojan design space. To accomplish these dual objectives, in this paper, we present MIMIC, a novel AI-guided framework for automatic Trojan insertion, which can create a large population of valid Trojans for a given design by mimicking the properties of a small set of known Trojans. While there exist tools to automatically insert Trojan instances using fixed Trojan templates, they cannot analyze known Trojan attacks for creating new instances that accurately capture the threat model. MIMIC works in two major steps: (1) it analyzes structural and functional features of existing Trojan populations in a multi-dimensional space to train machine learning models and generate a large number of "virtual Trojans" of the given design, (2) next, it binds them into the design by matching their functional/structural properties with suitable nets of the internal logic structure. We have developed a complete tool flow for MIMIC, extensively evaluated the framework by exploring several use-cases, and quantified its effectiveness to demonstrate highly promising results.},
	urldate = {2024-12-09},
	publisher = {arXiv},
	author = {Cruz, Jonathan and Gaikwad, Pravin and Nair, Abhishek and Chakraborty, Prabuddha and Bhunia, Swarup},
	month = apr,
	year = {2022},
	note = {arXiv:2204.08580 [cs]},
	keywords = {Computer Science - Cryptography and Security},
	file = {Full Text PDF:/Users/raphael/Zotero/storage/ZE6BL5BM/Cruz et al. - 2022 - Automatic Hardware Trojan Insertion using Machine Learning.pdf:application/pdf;Snapshot:/Users/raphael/Zotero/storage/FD5LKH5D/2204.html:text/html},
}

@misc{noauthor_trustzone_nodate,
	title = {{TrustZone} : sécuriser un client {TLS} avec {OP}-{TEE} {\textbar} {Linux} {Embedded}},
	url = {https://linuxembedded.fr/2023/07/trustzone-securiser-un-client-tls-avec-op-tee},
	urldate = {2024-12-09},
	file = {TrustZone \: sécuriser un client TLS avec OP-TEE | Linux Embedded:/Users/raphael/Zotero/storage/YZPGGJ2F/trustzone-securiser-un-client-tls-avec-op-tee.html:text/html},
}

@misc{prado_introduction_nodate,
	title = {Introduction to {Trusted} {Execution} {Environment} and {ARM}'s {TrustZone}},
	url = {https://sergioprado.blog/introduction-to-trusted-execution-environment-tee-arm-trustzone/},
	abstract = {A Trusted Execution Environment (TEE) is an environment where the code executed and the data accessed is isolated and protected in terms of confidentiality (no one have access to the data) and integrity (no one can change the code and its behavior).},
	language = {en},
	urldate = {2024-12-09},
	journal = {sergioprado.blog},
	author = {Prado, Sergio},
	file = {Snapshot:/Users/raphael/Zotero/storage/4YAWCDK7/introduction-to-trusted-execution-environment-tee-arm-trustzone.html:text/html},
}

@article{heiser_sel4_nodate,
	title = {The {seL4} {Microkernel} – {An} {Introduction}},
	language = {en},
	author = {Heiser, Gernot},
	file = {PDF:/Users/raphael/Zotero/storage/A82MSJGB/Heiser - The seL4 Microkernel – An Introduction.pdf:application/pdf},
}

@misc{noauthor_checklist_2024,
	title = {Checklist - {Linux} {Privilege} {Escalation} {\textbar} {HackTricks}},
	url = {https://book.hacktricks.xyz/linux-hardening/linux-privilege-escalation-checklist},
	language = {en},
	urldate = {2024-12-10},
	month = nov,
	year = {2024},
	file = {Snapshot:/Users/raphael/Zotero/storage/P6H27MAB/linux-privilege-escalation-checklist.html:text/html},
}

@misc{noauthor_getting_nodate,
	title = {Getting {Started} {\textbar} {seL4} docs},
	url = {https://docs.sel4.systems/GettingStarted},
	urldate = {2024-12-11},
	file = {Getting Started | seL4 docs:/Users/raphael/Zotero/storage/SDQWXKIV/GettingStarted.html:text/html},
}

@misc{noauthor_buffer_nodate,
	title = {Buffer {Overflow} {\textbar} {OWASP} {Foundation}},
	url = {https://owasp.org/www-community/vulnerabilities/Buffer_Overflow},
	abstract = {Buffer Overflow on the main website for The OWASP Foundation. OWASP is a nonprofit foundation that works to improve the security of software.},
	language = {en},
	urldate = {2024-12-14},
	file = {Snapshot:/Users/raphael/Zotero/storage/UYRPNA7Q/Buffer_Overflow.html:text/html},
}

@misc{noauthor_hardware_2024,
	title = {Hardware {Trojan}},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Hardware_Trojan&oldid=1219169230},
	abstract = {A Hardware Trojan (HT) is a malicious modification of the circuitry of an integrated circuit. A hardware Trojan is completely characterized by its physical representation and its behavior. The payload of an HT is the entire activity that the Trojan executes when it is triggered. In general, Trojans try to bypass or disable the security fence of a system: for example, leaking confidential information by radio emission. HTs also could disable, damage or destroy the entire chip or components of it.
Hardware Trojans may be introduced as hidden "Front-doors" that are inserted while designing a computer chip, by using a pre-made application-specific integrated circuit (ASIC) semiconductor intellectual property core (IP Core) that have been purchased from a non-reputable source, or inserted internally by a rogue employee, either acting on their own, or on behalf of rogue special interest groups, or state sponsored spying and espionage.
One paper published by IEEE in 2015 explains how a hardware design containing a Trojan could leak a cryptographic key leaked over an antenna or network connection, provided that the correct "easter egg" trigger is applied to activate the data leak.
In high security governmental IT departments, hardware Trojans are a well known problem when buying hardware such as: a KVM switch, keyboards, mice, network cards, or other network equipment. This is especially the case when purchasing such equipment from non-reputable sources that could have placed hardware Trojans to leak keyboard passwords, or provide remote unauthorized entry.},
	language = {en},
	urldate = {2024-12-14},
	journal = {Wikipedia},
	month = apr,
	year = {2024},
	note = {Page Version ID: 1219169230},
}

@misc{hoque_automated_2020,
	title = {An {Automated} {Framework} for {Board}-level {Trojan} {Benchmarking}},
	url = {http://arxiv.org/abs/2003.12632},
	doi = {10.48550/arXiv.2003.12632},
	abstract = {Economic and operational advantages have led the supply chain of printed circuit boards (PCBs) to incorporate various untrusted entities. Any of the untrusted entities are capable of introducing malicious alterations to facilitate a functional failure or leakage of secret information during field operation. While researchers have been investigating the threat of malicious modification within the scale of individual microelectronic components, the possibility of a board-level malicious manipulation has essentially been unexplored. In the absence of standard benchmarking solutions, prospective countermeasures for PCB trust assurance are likely to utilize homegrown representation of the attacks that undermines their evaluation and does not provide scope for comparison with other techniques. In this paper, we have developed the first-ever benchmarking solution to facilitate an unbiased and comparable evaluation of countermeasures applicable to PCB trust assurance. Based on a taxonomy tailored for PCB-level alterations, we have developed high-level Trojan models. From these models, we have generated a custom pool of board-level Trojan designs of varied complexity and functionality. We have also developed a tool-flow for automatically inserting these Trojans into various PCB designs and generate the Trojan benchmarks (i.e., PCB designs with Trojan). The tool-based Trojan insertion facilitate a comprehensive evaluation against large number of diverse Trojan implementations and application of data mining for trust verification. Finally, with experimental measurements from a fabricated PCB, we analyze the stealthiness of the Trojan designs.},
	urldate = {2024-12-14},
	publisher = {arXiv},
	author = {Hoque, Tamzidul and Yang, Shuo and Bhattacharyay, Aritra and Cruz, Jonathan and Bhunia, Swarup},
	month = mar,
	year = {2020},
	note = {arXiv:2003.12632 [cs]},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Hardware Architecture},
	file = {Full Text PDF:/Users/raphael/Zotero/storage/L5EESH5B/Hoque et al. - 2020 - An Automated Framework for Board-level Trojan Benchmarking.pdf:application/pdf;Snapshot:/Users/raphael/Zotero/storage/NKIHSMDZ/2003.html:text/html},
}

@misc{costan_sanctum_2015,
	title = {Sanctum: {Minimal} {Hardware} {Extensions} for {Strong} {Software} {Isolation}},
	shorttitle = {Sanctum},
	url = {https://eprint.iacr.org/2015/564},
	abstract = {Sanctum offers the same promise as SGX, namely strong provable isolation of software modules running concurrently and sharing resources, but protects against an important class of additional software attacks that infer private information from a program's memory access patterns. We follow a principled approach to eliminating entire attack surfaces through isolation, rather than plugging attack-specific privacy leaks.

Sanctum demonstrates that strong software isolation is achievable with a surprisingly small set of minimally invasive hardware changes, and a very reasonable overhead. Sanctum does not change any major CPU building block. Instead, we add hardware at the interfaces between building blocks, without impacting cycle time.

Our prototype shows a 2\% area increase in a Rocket RISC-V core. Over a set of benchmarks, Sanctum's worst observed overhead for isolated execution is 15.1\% over an idealized insecure baseline, and 2.7\% average overhead over a representative insecure baseline.},
	urldate = {2024-12-16},
	author = {Costan, Victor and Lebedev, Ilia and Devadas, Srinivas},
	year = {2015},
	note = {Publication info: Published elsewhere. Minor revision. USENIX Security Symposium 2016},
	file = {Full Text PDF:/Users/raphael/Zotero/storage/UK6MM2R2/Costan et al. - 2015 - Sanctum Minimal Hardware Extensions for Strong Software Isolation.pdf:application/pdf},
}
